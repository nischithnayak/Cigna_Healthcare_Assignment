******Assignment 1 *******
1: Create an array to store salaries and keys are Integer 

    DECLARE 
	TABLE Salary_Table TABLE OF NUMBER INDEX BY PLS_INTEGER;
	emp_salaries Salary_Table;
    BEGIN
	 emp_salaries(100) :=3000;
	 emp_salaries(200) :=4000;
	 emp_salaries(300) :=5000;
    DBMS_OUTPUT.PUT_LINE("Salary of emp(100)" || emp.salaries(100) );
    END;

2:  String based keys

	DECLARE
	   TABLE t_employee TABLE OF NUMBER INDEX BY VARCHAR2(20);
		v_salary t_employee;
	BEGIN
	v_salary('Alice') :=300;
	v_salary('Bob')   :=400;
	v_salary('Charls') :=500;
	DBMS_OUTPUT.PUT_LINE("Salary of Alice)" || v.salary(100) );
    END;
  
3:    One more example on  String based Keys

	DECLARE
		TYPE t_country_capital IS TABLE OF VARCHAR2(20)
			INDEX BY VARCHAR2(50);
		V_capitals t_country_capital;
		v_key VARCHAR2(20);
	BEGIN 
		v_capitals('USA') :='Washington';
		v_capitals('France') :='Paris';
		v_capitals('Japan') :='Tokyo';
	
	v_key :=v_capitals.FIRST;

	WHILE v_key  IS NOT NULL LOOP
		DBMS_OUTPUT.PUT_LINE(v_key || '->' || v_capitals(v_key));
		v_key :v_capitals.NEXT(v_key);
	END LOOP;
END;

4:  Create an array to store salaries and keys are Integer, Array Iteration

	
	DECLARE 
		TYPE salary_table IS TABLE OF NUMBER INDEX BY PLS_INTEGER;
	emp_salaries salary_table;
	v_key PLS_INTEGER;
	
	BEGIN 
 		
	emp_salaries(100) :=5000;
	emp_salaries(200) :=6000;
	emp_salaries(300) :=7000;
	
	v_key :=emp_salaries.FIRST;
	WHILE v_key IS NOT NULL LOOP
		 DBMS_OUTPUT.PUT_LINE(v_key || ' â†’ ' ||emp_salaries(v_key));
            v_key := emp_salaries.NEXT(v_key);
        END LOOP; 
      
      
    END;

5:   Storing table column data into array,  key : empno and value : Salary

 	DECLARE
    
   TYPE emp_sal_tab IS TABLE OF emps.sal%TYPE
       INDEX BY PLS_INTEGER; 
    
    emp_salaries emp_sal_tab;  
    
BEGIN

   FOR rec IN (SELECT empno, sal FROM emps) LOOP
      emp_salaries(rec.empno) := rec.sal * 1.1;
   END LOOP;
   
      
   DBMS_OUTPUT.PUT_LINE('Saved salaries in memory.'); 
   
END;





*****Assignment 2 *****

1. 

DECLARE
	Principal NUMBER :=200;
	Rate_of_Intrest NUMBER :=12;
	Time NUMBER :=2;
BEGIN 
	DBMS_OUTPUT.PUT_LINE("Simple Intrest: " || ((Principal * 		Rate_of_Intrest * Time)/100);
END;

2.

DECLARE 
	emp_name VARCHAR2(50):="Paavan";
	salary NUMBER :=200000;
	bonus NUMBER;
BEGIN 
	IF salary >50000 THEN
	DBMS_OUTPUT.PUT_LINE(emp_name || " has a salary of " || salary || "and a bonus" 
|| 0.10* salary );
 	ELSE 
	DBMS_OUTPUT.PUT_LINE(emp_name || " has a salary of " || salary || "and a bonus" 
|| 0.15* salary );
	END IF;
END;

3.

DECLARE 
	v_dept DEPARTMENTS%ROWTYPE
BEGIN 
	SELECT * INTO v_dept FROM DEPATMENT  WHERE Department_Id =123
	DBMS_OUTPUT.PUT_LINE("Department Name: || D_name || "Location" ||location);
END;

4.

DECLARE
TYPE marks_table IS TABLE OF NUMBER INDEX BY VARCHAR2(50);
student_marks marks_table;

student_name VARCHAR2(50);
total_marks NUMBER := 0;
average_marks NUMBER := 0;
count_students NUMBER := 0;

BEGIN
student_marks('Paavan') := 85;
student_marks('Raksha') := 92;
student_marks('Navya') := 88;
student_marks('Nischith') := 90;
student_marks('Arjun') := 79;

student_name := student_marks.FIRST;
WHILE student_name IS NOT NULL LOOP
DBMS_OUTPUT.PUT_LINE(student_name || ' scored ' || student_marks(student_name));
total_marks := total_marks + student_marks(student_name);
count_students := count_students + 1;
student_name := student_marks.NEXT(student_name);
END LOOP;

average_marks := total_marks / count_students;

DBMS_OUTPUT.PUT_LINE('Total Marks: ' || total_marks);
DBMS_OUTPUT.PUT_LINE('Average Marks: ' || average_marks);
END;
/





